package models

import (
	"database/sql"
	"errors"
	"time"
)

type Snippet struct {
	ID      int
	Title   string
	Content string
	Created time.Time
	Expires time.Time
}

type SnippetModel struct {
	DB *sql.DB
}

// java equivalent-
//
//	class SnippetModel{
//				public Snippet get(int id)
//		}

// DB.Exec() background -
//  1. creates prepared statement, DB parses and compiles it, ready for execution
//  2. Exec() passes parameter values to DB, Db executes the prepared stmt using these.
//  3. then closes/ deallocates prepared stmt.
func (m *SnippetModel) Insert(title string, content string, expires int) (int, error) {
	stmt := `INSERT INTO snippets (title, content, created, expires)
			 VALUES (?, ?, UTC_TIMESTAMP(), DATE_ADD(UTC_TIMESTAMP(), INTERVAL ? DAY))`

	// DB.Exec returns sql.Result type, has 2 methods, LastInsertId() and RowsAffected()
	// Postgres doesnt support LastInsertId()
	result, err := m.DB.Exec(stmt, title, content, expires)
	if err != nil {
		return 0, err
	}

	// get id of newly inserted record using LastInsertId()
	// generated by DB in response to a command, auto incremented when inserting a row.
	id, err := result.LastInsertId()
	if err != nil {
		return 0, err
	}
	return int(id), nil
}

func (m *SnippetModel) Get(id int) (*Snippet, error) {
	stmt := `SELECT id, title, content, created, expires FROM snippets WHERE
             expires > UTC_TIMESTAMP() AND id = ?`

	// returns pointer to sql.Row object containing result from DB
	row := m.DB.QueryRow(stmt, id)

	// pointer to zeroed snippet struct
	s := &Snippet{}

	// converts raw Db output to native Go types:
	// 		1. char, varchar, text -> string
	// 		2. boolean -> bool
	// 		3. int -> int
	// 		4. bigint -> int64
	// 		5. decimal, numeric -> float
	// 		6. time, date, timestamp -> time.Time (because we put parseTime=true)
	err := row.Scan(&s.ID, &s.Title, &s.Content, &s.Created, &s.Expires)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrNoRecord
		} else {
			return nil, err
		}
	}

	return s, nil
}

func (m *SnippetModel) Latest() ([]*Snippet, error) {
	return nil, nil
}
